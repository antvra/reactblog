[{"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/App/App.tsx":"1","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/App/index.ts":"2","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/EditForm/EditProfileForm.tsx":"3","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/EditForm/index.ts":"4","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/Header/Header.tsx":"5","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/Header/index.ts":"6","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/MutateArticleForm/MutateArticleForm.tsx":"7","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/MutateArticleForm/index.ts":"8","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/PostItem/PostItem.tsx":"9","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/PostItem/index.ts":"10","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/PostList/PostList.tsx":"11","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/PostList/index.ts":"12","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/SignInForm/SignInForm.tsx":"13","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/SignInForm/index.ts":"14","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/SignUpForm/SignUpForm.tsx":"15","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/SignUpForm/index.ts":"16","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/hooks/useAuth.ts":"17","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/index.tsx":"18","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/EditProfilePage.tsx":"19","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/NotFoundPage.tsx":"20","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/PostItemPage.tsx":"21","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/PostListPage.tsx":"22","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/SignInPage.tsx":"23","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/SignUpPage.tsx":"24","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/index.ts":"25","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/store/API.ts":"26","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/store/index.ts":"27","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/store/slices/userSlice.ts":"28","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/types/types.ts":"29"},{"size":1055,"mtime":1647279550605,"results":"30","hashOfConfig":"31"},{"size":39,"mtime":1647273951034,"results":"32","hashOfConfig":"31"},{"size":3438,"mtime":1647291068098,"results":"33","hashOfConfig":"31"},{"size":63,"mtime":1647273951034,"results":"34","hashOfConfig":"31"},{"size":1873,"mtime":1647279559012,"results":"35","hashOfConfig":"31"},{"size":45,"mtime":1647273951034,"results":"36","hashOfConfig":"31"},{"size":7125,"mtime":1647290978043,"results":"37","hashOfConfig":"31"},{"size":67,"mtime":1647273951034,"results":"38","hashOfConfig":"31"},{"size":4709,"mtime":1647280975473,"results":"39","hashOfConfig":"31"},{"size":49,"mtime":1647273951034,"results":"40","hashOfConfig":"31"},{"size":927,"mtime":1647291068098,"results":"41","hashOfConfig":"31"},{"size":49,"mtime":1647273951034,"results":"42","hashOfConfig":"31"},{"size":2631,"mtime":1647279644128,"results":"43","hashOfConfig":"31"},{"size":53,"mtime":1647273951034,"results":"44","hashOfConfig":"31"},{"size":4387,"mtime":1647279644168,"results":"45","hashOfConfig":"31"},{"size":53,"mtime":1647273951034,"results":"46","hashOfConfig":"31"},{"size":319,"mtime":1647305573771,"results":"47","hashOfConfig":"31"},{"size":306,"mtime":1647279644181,"results":"48","hashOfConfig":"31"},{"size":1102,"mtime":1647305833962,"results":"49","hashOfConfig":"31"},{"size":521,"mtime":1647279644202,"results":"50","hashOfConfig":"31"},{"size":1112,"mtime":1647279644210,"results":"51","hashOfConfig":"31"},{"size":1142,"mtime":1647291068098,"results":"52","hashOfConfig":"31"},{"size":892,"mtime":1647291068098,"results":"53","hashOfConfig":"31"},{"size":461,"mtime":1647279644238,"results":"54","hashOfConfig":"31"},{"size":274,"mtime":1647273951034,"results":"55","hashOfConfig":"31"},{"size":2804,"mtime":1647280487169,"results":"56","hashOfConfig":"31"},{"size":348,"mtime":1647280487169,"results":"57","hashOfConfig":"31"},{"size":709,"mtime":1647280487169,"results":"58","hashOfConfig":"31"},{"size":326,"mtime":1647291064062,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u51lxu",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/App/App.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/App/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/EditForm/EditProfileForm.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/EditForm/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/Header/Header.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/Header/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/MutateArticleForm/MutateArticleForm.tsx",["151","152","153"],[],"import { Form, Card, Input, Button, Space, Result, Spin } from 'antd'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { useForm } from 'antd/lib/form/Form'\nimport { useEffect, useState } from 'react'\n\nimport { useAuth } from '../../hooks/useAuth'\nimport {\n  useCreateNewArticleMutation,\n  useEditArticleMutation,\n  useGetPostForEditMutation\n} from '../../store/API'\nconst { TextArea } = Input\nimport './MutateArticleForm.scss'\n\nconst MutateArticleForm = () => {\n  const { slug } = useParams()\n\n  const navigate = useNavigate()\n\n  const [form] = useForm()\n\n  const initialValues = {\n    title: '',\n    description: '',\n    tagList: [],\n    body: ''\n  }\n\n  const [formInitialState, changeFormInitialState] = useState<{\n    title: string\n    description: string\n    tagList: string[]\n    body: string\n  }>(initialValues)\n\n  const { isAuth, token } = useAuth()\n\n  const [getPostForEdit, { data: postForEdit, isLoading, isUninitialized }] =\n    useGetPostForEditMutation()\n\n  useEffect(() => {\n    if (!slug) {\n      changeFormInitialState(initialValues)\n      form.setFieldsValue(initialValues)\n    }\n    if (slug) {\n      if (isUninitialized) {\n        getPostForEdit({ slug, token }).unwrap()\n      }\n      if (!isLoading && postForEdit) {\n        changeFormInitialState({\n          body: postForEdit.article.body,\n          title: postForEdit.article.title,\n          tagList: postForEdit.article.tagList,\n          description: postForEdit.article.description\n        })\n        form.setFieldsValue({\n          title: postForEdit.article.title,\n          description: postForEdit.article.description,\n          body: postForEdit.article.body,\n          tagList: postForEdit.article.tagList\n        })\n      }\n    }\n  }, [isLoading, slug])\n\n  const [createNewArticle, { data: createData }] = useCreateNewArticleMutation()\n\n  const [editArticle, { data: editData }] = useEditArticleMutation()\n\n  const handleSubmit = (article: object) => {\n    if (slug) {\n      editArticle({ slug, article, token }).unwrap()\n    } else {\n      createNewArticle({ article, token }).unwrap()\n    }\n  }\n\n  const onInputTagChange = (newValue: string, index: number) => {\n    const newTags = [...formInitialState.tagList].map((el, elIndex) =>\n      elIndex === index ? newValue : el\n    )\n    changeFormInitialState((prevState) => ({ ...prevState, tagList: newTags }))\n  }\n\n  const addTag = (addFn: () => void) => {\n    changeFormInitialState((prevState: any) => {\n      return { ...prevState, tagList: [...prevState.tagList, ''] }\n    })\n    addFn()\n  }\n\n  const removeTag = (\n    removeFn: (name: any) => void,\n    index: number,\n    fieldName: string | number\n  ) => {\n    const newTags = [...formInitialState.tagList].filter((el, elIndex) =>\n      elIndex === index ? false : true\n    )\n    changeFormInitialState((prevState: any) => {\n      return { ...prevState, tagList: newTags }\n    })\n\n    removeFn(fieldName)\n  }\n\n  if (!!editData || !!createData) {\n    return (\n      <Result\n        status=\"success\"\n        title=\"Успешно!\"\n        subTitle=\"Хотите перейти на главную страницу?\"\n        extra={\n          <Button type=\"primary\" onClick={() => navigate('/articles')}>\n            На главную\n          </Button>\n        }\n      />\n    )\n  }\n  if (!isAuth) {\n    return (\n      <Result\n        status=\"403\"\n        title=\"Упс...\"\n        subTitle=\"Кажется, вы не авторизованы.\"\n        extra={\n          <Button type=\"primary\" onClick={() => navigate('/sign-in')}>\n            На страницу авторизации\n          </Button>\n        }\n      />\n    )\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"load\">\n        <Spin size=\"large\" />\n      </div>\n    )\n  }\n\n  return (\n    <Card\n      bordered={false}\n      style={{\n        width: '90%',\n        borderRadius: '5px',\n        filter: 'drop-shadow(0px 4px 12px rgba(0, 0, 0, 0.15))',\n        margin: '60px auto',\n        padding: '24px 8px'\n      }}\n    >\n      <h6 className=\"form__title\">\n        {slug ? 'Edit Article' : 'Create new article'}\n      </h6>\n      <Form\n        layout=\"vertical\"\n        form={form}\n        initialValues={formInitialState}\n        size=\"middle\"\n        onFinish={handleSubmit}\n      >\n        <Form.Item\n          required={false}\n          label=\"Title\"\n          name=\"title\"\n          rules={[{ required: true, message: 'Please, write something' }]}\n        >\n          <Input placeholder=\"Title\" />\n        </Form.Item>\n        <Form.Item\n          required={false}\n          label=\"Short description\"\n          name=\"description\"\n          rules={[{ required: true, message: 'Please, write something' }]}\n        >\n          <Input placeholder=\"Short description\" />\n        </Form.Item>\n        <Form.Item\n          required={false}\n          label=\"Text\"\n          name=\"body\"\n          rules={[{ required: true, message: 'Please, write something' }]}\n        >\n          <TextArea placeholder=\"Body\" autoSize={{ minRows: 10 }} />\n        </Form.Item>\n        <Form.List name=\"tagList\">\n          {(fields, { add, remove }) => {\n            return (\n              <Space direction=\"vertical\">\n                {fields.map((field, index) => {\n                  return (\n                    <Form.Item key={field.key}>\n                      <Form.Item {...field} noStyle>\n                        <Space>\n                          <Input\n                            placeholder=\"Tag\"\n                            style={{ width: '300px' }}\n                            defaultValue={formInitialState.tagList[index]}\n                            onChange={(event) =>\n                              onInputTagChange(event.target.value, index)\n                            }\n                          />\n                          {fields.length >= 1 && (\n                            <Button\n                              danger\n                              onClick={() => {\n                                removeTag(remove, index, field.name)\n                              }}\n                            >\n                              Delete\n                            </Button>\n                          )}\n                          {index === fields.length - 1 && (\n                            <Button block onClick={() => addTag(add)}>\n                              Add Tag\n                            </Button>\n                          )}\n                        </Space>\n                      </Form.Item>\n                    </Form.Item>\n                  )\n                })}\n                {fields.length === 0 && (\n                  <Form.Item>\n                    <Button block onClick={() => addTag(add)}>\n                      Add Tag\n                    </Button>\n                  </Form.Item>\n                )}\n              </Space>\n            )\n          }}\n        </Form.List>\n        <Form.Item name=\"submit\">\n          <Button type=\"primary\" htmlType=\"submit\" style={{ width: '300px' }}>\n            Send\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  )\n}\n\nexport default MutateArticleForm\n","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/MutateArticleForm/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/PostItem/PostItem.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/PostItem/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/PostList/PostList.tsx",["154"],[],"import { List, Pagination } from 'antd'\nimport { v4 } from 'uuid'\n\nimport { PostItem } from '../PostItem'\nimport { Post } from '../../types/types'\n\nimport './PostList.scss'\n\ninterface PostListProps {\n  currentPage: number\n  changePage: any\n  articles: Array<Post>\n  articlesCount: number\n}\n\nconst PostList = ({\n  articles,\n  articlesCount,\n  currentPage,\n  changePage\n}: PostListProps) => {\n  return (\n    <List size=\"large\" loading={!articles}>\n      {articles.map((el) => {\n        return (\n          <List.Item key={v4()}>\n            <PostItem {...el} openned={false} />\n          </List.Item>\n        )\n      })}\n      <List.Item>\n        <Pagination\n          size=\"small\"\n          pageSize={5}\n          showSizeChanger={false}\n          current={currentPage}\n          onChange={(newPage) => changePage(newPage)}\n          total={articlesCount}\n        />\n      </List.Item>\n    </List>\n  )\n}\n\nexport default PostList\n","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/PostList/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/SignInForm/SignInForm.tsx",["155"],[],"import { Card, Form, Input, Button, Result } from 'antd'\nimport { useEffect } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport './SignInForm.scss'\n\nconst SignInForm = ({ serverErrors, handleSubmit, success }: any) => {\n  const [form] = Form.useForm()\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (serverErrors) {\n      form.setFields([\n        { name: 'password', errors: ['Username or password is invalid'] },\n        { name: 'email', errors: ['Username or password is invalid'] }\n      ])\n    }\n  }, [serverErrors, form])\n\n  if (success) {\n    return (\n      <Result\n        status=\"success\"\n        title=\"Успешная авторизация!\"\n        subTitle=\"Хотите перейти на главную?\"\n        extra={\n          <Button type=\"primary\" onClick={() => navigate('/articles')}>\n            На главную\n          </Button>\n        }\n      />\n    )\n  }\n\n  return (\n    <Card\n      bordered={false}\n      style={{\n        width: '384px',\n        borderRadius: '5px',\n        filter: 'drop-shadow(0px 4px 12px rgba(0, 0, 0, 0.15))',\n        margin: '60px auto',\n        padding: '24px 8px'\n      }}\n    >\n      <h6 className=\"form__title\">Sign In</h6>\n      <Form\n        autoComplete=\"off\"\n        form={form}\n        layout=\"vertical\"\n        size=\"middle\"\n        onFinish={handleSubmit}\n      >\n        <Form.Item\n          required={false}\n          label=\"Email Address\"\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              message: 'Please enter your email address'\n            },\n            {\n              type: 'email',\n              message: 'Please enter a valid email'\n            }\n          ]}\n          hasFeedback\n        >\n          <Input placeholder=\"Email Address\" />\n        </Form.Item>\n\n        <Form.Item\n          required={false}\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Password is required'\n            },\n            {\n              min: 6,\n              message: 'Your password needs to be at least 6 characters.'\n            }\n          ]}\n          hasFeedback\n        >\n          <Input.Password placeholder=\"Password\" />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" style={{ width: '100%' }}>\n            Login\n          </Button>\n        </Form.Item>\n      </Form>\n      <h6 className=\"form__prompt\">\n        Don’t have an account? <Link to=\"/sign-up\">Sign Up</Link>.\n      </h6>\n    </Card>\n  )\n}\n\nexport default SignInForm\n","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/SignInForm/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/SignUpForm/SignUpForm.tsx",["156"],[],"import { Card, Form, Input, Button, Divider, Checkbox, Result } from 'antd'\nimport { useEffect } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\n\nimport './SignUpForm.scss'\n\nconst SignUpForm = ({ serverErrors, handleSubmit, success }: any) => {\n  const navigate = useNavigate()\n  const [form] = Form.useForm()\n\n  useEffect(() => {\n    if (serverErrors?.data.errors.username) {\n      form.setFields([\n        { name: 'username', errors: [`${serverErrors.data.errors.username}`] }\n      ])\n    }\n\n    if (serverErrors?.data.errors.email) {\n      form.setFields([\n        { name: 'email', errors: [`${serverErrors.data.errors.email}`] }\n      ])\n    }\n  }, [serverErrors, form])\n\n  if (success) {\n    return (\n      <Result\n        status=\"success\"\n        title=\"Успешная регистрация!\"\n        subTitle=\"Поздравляем с регистрацией. Хотите перейти на страницу авторизации?\"\n        extra={\n          <Button type=\"primary\" onClick={() => navigate('/sign-in')}>\n            На страницу авторизации\n          </Button>\n        }\n      />\n    )\n  }\n\n  return (\n    <Card\n      bordered={false}\n      style={{\n        width: '384px',\n        borderRadius: '5px',\n        filter: 'drop-shadow(0px 4px 12px rgba(0, 0, 0, 0.15))',\n        margin: '60px auto',\n        padding: '24px 8px'\n      }}\n    >\n      <h6 className=\"form__title\">Create new account</h6>\n      <Form layout=\"vertical\" form={form} size=\"middle\" onFinish={handleSubmit}>\n        <Form.Item\n          required={false}\n          label=\"Username\"\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: 'Please enter your username'\n            }\n          ]}\n          hasFeedback\n        >\n          <Input placeholder=\"Username\" />\n        </Form.Item>\n\n        <Form.Item\n          required={false}\n          label=\"Email Address\"\n          name=\"email\"\n          rules={[\n            {\n              required: true,\n              message: 'Please enter your email address'\n            },\n            {\n              type: 'email',\n              message: 'Please enter a valid email'\n            }\n          ]}\n          hasFeedback\n        >\n          <Input placeholder=\"Email Address\" />\n        </Form.Item>\n\n        <Form.Item\n          required={false}\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Password is required'\n            },\n            {\n              min: 6,\n              message: 'Your password needs to be at least 6 characters.'\n            }\n          ]}\n          hasFeedback\n        >\n          <Input.Password placeholder=\"Password\" />\n        </Form.Item>\n\n        <Form.Item\n          required={false}\n          label=\"Repeat Password\"\n          name=\"repeat\"\n          dependencies={['password']}\n          rules={[\n            {\n              required: true,\n              message: 'Repeat password is required'\n            },\n            ({ getFieldValue }) => ({\n              validator(_, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve()\n                }\n                return Promise.reject('Passwords must match')\n              }\n            })\n          ]}\n          hasFeedback\n        >\n          <Input.Password placeholder=\"Repeat Password\" />\n        </Form.Item>\n\n        <Divider />\n\n        <Form.Item\n          name=\"agreement\"\n          valuePropName=\"checked\"\n          rules={[\n            {\n              validator: (_, value) =>\n                value\n                  ? Promise.resolve()\n                  : Promise.reject('Should accept agreement')\n            }\n          ]}\n        >\n          <Checkbox checked={true}>\n            <h6 className=\"form__checkbox_text\">\n              I agree to the processing of my personal information\n            </h6>\n          </Checkbox>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" style={{ width: '100%' }}>\n            Create\n          </Button>\n        </Form.Item>\n      </Form>\n      <h6 className=\"form__prompt\">\n        Already have an account? <Link to=\"/sign-in\">Sign In</Link>.\n      </h6>\n    </Card>\n  )\n}\n\nexport default SignUpForm\n","/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/components/SignUpForm/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/hooks/useAuth.ts",[],["157"],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/index.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/EditProfilePage.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/NotFoundPage.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/PostItemPage.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/PostListPage.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/SignInPage.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/SignUpPage.tsx",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/pages/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/store/API.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/store/index.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/store/slices/userSlice.ts",[],[],"/Users/swiftrade/Documents/Files/JSREACT/blogapp/src/types/types.ts",[],[],{"ruleId":"158","severity":1,"message":"159","line":87,"column":40,"nodeType":"160","messageId":"161","endLine":87,"endColumn":43,"suggestions":"162"},{"ruleId":"158","severity":1,"message":"159","line":94,"column":22,"nodeType":"160","messageId":"161","endLine":94,"endColumn":25,"suggestions":"163"},{"ruleId":"158","severity":1,"message":"159","line":101,"column":40,"nodeType":"160","messageId":"161","endLine":101,"endColumn":43,"suggestions":"164"},{"ruleId":"158","severity":1,"message":"159","line":11,"column":15,"nodeType":"160","messageId":"161","endLine":11,"endColumn":18,"suggestions":"165"},{"ruleId":"158","severity":1,"message":"159","line":6,"column":62,"nodeType":"160","messageId":"161","endLine":6,"endColumn":65,"suggestions":"166"},{"ruleId":"158","severity":1,"message":"159","line":7,"column":62,"nodeType":"160","messageId":"161","endLine":7,"endColumn":65,"suggestions":"167"},{"ruleId":"168","severity":2,"message":"169","line":2,"column":10,"nodeType":"170","endLine":2,"endColumn":24,"suppressions":"171"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["172","173"],["174","175"],["176","177"],["178","179"],["180","181"],["182","183"],"import/named","RootStateOrAny not found in 'react-redux'","Identifier",["184"],{"messageId":"185","fix":"186","desc":"187"},{"messageId":"188","fix":"189","desc":"190"},{"messageId":"185","fix":"191","desc":"187"},{"messageId":"188","fix":"192","desc":"190"},{"messageId":"185","fix":"193","desc":"187"},{"messageId":"188","fix":"194","desc":"190"},{"messageId":"185","fix":"195","desc":"187"},{"messageId":"188","fix":"196","desc":"190"},{"messageId":"185","fix":"197","desc":"187"},{"messageId":"188","fix":"198","desc":"190"},{"messageId":"185","fix":"199","desc":"187"},{"messageId":"188","fix":"200","desc":"190"},{"kind":"201","justification":"202"},"suggestUnknown",{"range":"203","text":"204"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"203","text":"205"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"206","text":"204"},{"range":"206","text":"205"},{"range":"207","text":"204"},{"range":"207","text":"205"},{"range":"208","text":"204"},{"range":"208","text":"205"},{"range":"209","text":"204"},{"range":"209","text":"205"},{"range":"210","text":"204"},{"range":"210","text":"205"},"directive","",[2449,2452],"unknown","never",[2593,2596],[2824,2827],[236,239],[233,236],[253,256]]